// Generated by Dagger (https://dagger.dev).
package com.example.samplearch.source.remote.di;

import android.content.Context;
import com.example.samplearch.source.remote.interceptors.BaseHeaderInterceptor;
import com.example.samplearch.source.remote.interceptors.ConnectionInterceptor;
import com.example.samplearch.source.remote.interceptors.LoggingInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteHttpModule_ProvidesOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<LoggingInterceptor> loggingInterceptorProvider;

  private final Provider<ConnectionInterceptor> connectionInterceptorProvider;

  private final Provider<BaseHeaderInterceptor> baseHeaderInterceptorProvider;

  private final Provider<Context> contextProvider;

  public RemoteHttpModule_ProvidesOkHttpClientFactory(
      Provider<LoggingInterceptor> loggingInterceptorProvider,
      Provider<ConnectionInterceptor> connectionInterceptorProvider,
      Provider<BaseHeaderInterceptor> baseHeaderInterceptorProvider,
      Provider<Context> contextProvider) {
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.connectionInterceptorProvider = connectionInterceptorProvider;
    this.baseHeaderInterceptorProvider = baseHeaderInterceptorProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkHttpClient(loggingInterceptorProvider.get(), connectionInterceptorProvider.get(), baseHeaderInterceptorProvider.get(), contextProvider.get());
  }

  public static RemoteHttpModule_ProvidesOkHttpClientFactory create(
      Provider<LoggingInterceptor> loggingInterceptorProvider,
      Provider<ConnectionInterceptor> connectionInterceptorProvider,
      Provider<BaseHeaderInterceptor> baseHeaderInterceptorProvider,
      Provider<Context> contextProvider) {
    return new RemoteHttpModule_ProvidesOkHttpClientFactory(loggingInterceptorProvider, connectionInterceptorProvider, baseHeaderInterceptorProvider, contextProvider);
  }

  public static OkHttpClient providesOkHttpClient(LoggingInterceptor loggingInterceptor,
      ConnectionInterceptor connectionInterceptor, BaseHeaderInterceptor baseHeaderInterceptor,
      Context context) {
    return Preconditions.checkNotNullFromProvides(RemoteHttpModule.INSTANCE.providesOkHttpClient(loggingInterceptor, connectionInterceptor, baseHeaderInterceptor, context));
  }
}
